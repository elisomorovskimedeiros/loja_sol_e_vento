<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <div class="row items-center" style="height: 100vh">
        <div class="col text-center q-pa-sm ">
            <q-btn color="primary" icon="camera_alt" label="Ler CÃ³digo de Barras"
            class="full-width" size="lg" onclick="leitor.methods.iniciarLeitor()"
            v-show="cameraStatus === 0"/>
            <div class="text-h6" v-if="code">Codigo:<span id="msg"> {{ code }}</span></div>
            <div id="scan" v-show="cameraStatus === 1"></div>
            <q-page-sticky position="bottom-right" :offset="[18, 18]">
            <q-btn  icon="cancel" color="negative" label="Fechar" v-show="cameraStatus === 1"
            @click="onStop" />
            </q-page-sticky>
        </div>
    </div>
</body>
    <script src="js/quagga.min.js">     
    </script>
    <script>

var backCamID = null;
var last_camera = null;
navigator.mediaDevices.enumerateDevices()
.then(function(devices) {
  devices.forEach(function(device) {  
    if( device.kind == "videoinput" && device.label.match(/back/) !== null ){
      backCamID = device.deviceId;
    }
    if( device.kind === "videoinput"){
      last_camera = device.deviceId;
    } 
  });
  if( backCamID === null){
    backCamID = last_camera;
  }
}).catch(function(err) {
  console.log("ocorreu erro na descoberta da camera");
  console.log(err);
});

let leitor = {
  data: () => {
    return {
      code: '',
      dialog: false,
      cameraStatus: 0
    }
  },
  methods: {
    iniciarLeitor () {
      this.cameraStatus = 1
      Quagga.init({
        inputStream: {
          name: 'Live',
          type: 'LiveStream',
          constraints: {
            deviceId: backCamID  
          },
          target: document.querySelector('#scan')
        },
        frequency: 10,
        decoder: {
          readers: [
            'ean_reader'
          ],
          multiple: false
        }
        // numOfWorkers: navigator.hardwareConcurrency,
        // locate: false
      }, (err) => {
        if (err) {
          console.log(err)
          document.getElementById("msg").innerHTML = err;
          return
        }
        console.log('Initialization finished. Ready to start')
        Quagga.start()
        Quagga.onDetected(this.onDetected)
      })
    },
    onDetected (data) {
        document.getElementById("msg").innerHTML =  data.codeResult.code;
      this.code = data.codeResult.code
      this.cameraStatus = 0
      this.onStop()
    },
    onStop () {
      Quagga.stop()
      this.cameraStatus = 0
    }
  }
}

    </script>



    <style>
        video {
            width: 100%;
            height: auto;
        }
        canvas {
            display: none;
        }
    </style>
</html>